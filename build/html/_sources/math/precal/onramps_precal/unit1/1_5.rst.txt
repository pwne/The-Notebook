.. sectnum::
  :prefix: 1.
  :start: 5
  :depth: 2

Function Patterns
#################

Types of Patterns
=================

There are 3 types of Patterns that you might encounter:

.. sidebar:: Results of Operations

  Addition: **sum**
  Multiplication: **product**

Arithmetic:
  Add or Subtract by a Constant

Geometric:
  Multiply or Divide by a Constant

Triangular Difference:
  Constant 1\ :sup:`st`\, 2\ :sup:`nd`\, 3\ :sup:`rd` \ Difference (*and so on*)

  .. seealso:: :doc:`1_4`

Pattern Examples
****************

.. |fx| replace:: \ :math:`f(x)`\

.. |2nd| replace:: 2\ :sup:`nd`\

Sum - Sum Pattern
-----------------

**Linear Functions** follow the *Sum - Sum* Pattern, where both the :math:`x`
and :math:`f(x)` values have a constant value added to them.

**Example:**
  === ====
  x   |fx|
  === ====
  2   4
  4   9
  6   14
  8   19
  10  24
  === ====

  .. note::

    Note the Following Patterns in the Table:
      :math:`x_2 = x_1 + 2` - **sum**

      :math:`f(x_2) = f(x_1) + 5` - **sum**


Sum - |2nd| Difference Pattern
------------------------------

**Quadratic Functions** follow the *Sum -* |2nd| *Difference* Pattern,
where the :math:`x` values have a constant added to them while the
:math:`f(x)` values follow a :doc:`2nd Difference. <1_4>`

**Example:**
  === ====
  x   |fx|
  === ====
  1   15
  3   5
  5   19
  7   57
  9   119
  === ====

  .. note::

    Note the Following Patterns in the Table:
      :math:`x_2 = x_1 + 2` - **sum**

      ::

        15   5  19  57  119
          -10  14  38  62     <- 1st Difference
             24  24  24       <- 2nd Difference


Sum - Product Pattern
---------------------

**Exponential Functions** follow the *Sum - Product* Pattern, where the
:math:`x` values have a constant added to them while the :math:`f(x)` values
have a constant multiplied to them.

**Example:**
  === =====
  x   |fx|
  === =====
  1   15
  3   135
  5   1215
  7   10935
  === =====

  .. note::

    Note the Following Patterns in the Table:
      :math:`x_2 = x_1 + 2` - **sum**

      :math:`f(x_2) = f(x_1) \times 9` - **product**


Product - Sum Pattern
---------------------

**Logarithmic Functions** follow the *Product - Sum* Pattern, where the
:math:`x` values have a constant multiplied to them while the :math:`f(x)`
values have a constant added to them.

**Example:**
  === ====
  x   |fx|
  === ====
  6   1
  18  2
  54  3
  162 4
  === ====

  .. note::

    Note the Following Patterns in the Table:
      :math:`x_2 = x_1 \times 3`

      :math:`f(x_2) = f(x_1) + 1`


Product - Product Pattern
-------------------------

**Power Functions** follow the *Product - Product* Pattern, where both the
:math:`x` and :math:`f(x)` values have a constant multiplied to them.

**Example:**
  === ====
  x   |fx|
  === ====
  3   135
  6   1080
  9   3695
  12  8640
  === ====

  .. note::

    Notice that the third Ordered Pair does not follow the pattern described.

    That is **OKAY** and can happen sometimes, just **ignore** that pair.


.. seealso::

  For any question about the functions mentioned above go to:  :doc:`1.1 What is a Function? <1_1>`


Piecewise Functions
===================

Piecewise Functions are where the pattern for :math:`f(x)` changes. The idea
is written as:

.. math::

	f(x) = \begin{cases}
  formula \; 1, \hspace{20 pt} \text{ if domain for formula 1 } \\
  formula \; 2, \hspace{20 pt} \text{ if domain for formula 2 } \\
  formula \; 3, \hspace{20 pt} \text{ if domain for formula 1} \\
  \end{cases}

**Example:**
  .. image:: ..\\_static\\piecewise-example.png
    :scale: 25%

 The Function above would be written as:

 .. math::

 	f(x) = \begin{cases}
  x^2,     \text{ if } x \leq 1 \\
  3, \; \, \text{ if } 1 < x \leq 2 \\
  x, \;    \text{ if } x > 2 \\
  \end{cases}

**Example:**
  `At Imaginary College, tuition rates for in-state residents were $92 per
  credit for the first 10 credits, $35 per credit for credits 11-18, and for
  over 18 credits the rate is $74 per credit. Write a piecewise defined
  function for the total tuition, T, at Imaginary College as a function
  of the number of credits taken, c. Be sure to consider a reasonable
  domain and range.`

  The problem above could be expressed as:

  .. math::

  	T(c) = \begin{cases}
    92c, \hspace 67pt                 \text{ if } x \leq 10 \\
    920 + 35(c - 10), \hspace 10pt    \text{ if } 11 \leq x \leq 18 \\
    1200 + 74(c - 18), \; \hspace 2pt \text{ if } c > 18 \\
    \end{cases}

Writing Piecewise Functions
***************************

The following sections will explain the conventions used to write each of
the parts that make up Piecewise Functions.

Formula Syntax
--------------

Write the Functions in the order they appear from **left to right** to make
it easier to read.

.. note::

	Do not include any ":math:`y =`" or ":math:`f(x) =`" because each expression falls under one big Function declared to the left of the Curly Bracket ( ":math:`\{`" ).


Conditional Syntax
------------------

The Conditionals at the end of each line describe the domain for the expressions
to the left. For how to write or interpret the conditionals, :doc:`Click Here. <1_2>`
