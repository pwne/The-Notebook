.. sectnum::
  :prefix: 1.
  :start: 2
  :depth: 2

Functions and Types of Functions
################################


Domain, Codomain, and Range
===========================

Domain
    The set of all inputs of a Function (ie. the *x* values)

Codomain
    All of the possible outputs of a Function (ie. the *types of numbers*).

    See :doc:`Types of Numbers in 1.1 - Functions <1_1>`

Range
    The actual outputs of a Function (ie. the *y* values)

Example:
  .. image:: ..\\_static\\domain-codomain-range.png


Stating Domain and Range
************************

Domain and Range can be written in one of two ways:


Interval Notation
-----------------

.. note::

	*a* and *b* are the lower and upper bound of the Domain/Range

+------------------------+---------------------------+----------------------------+
| Name of Interval       | Notation                  | Inequality Description     |
+========================+===========================+============================+
| Finite and Closed      | :math:`[a, b]`            | :math:`a \leq x \leq b`    |
+------------------------+---------------------------+----------------------------+
| Finite and Open        | :math:`(a, b)`            | :math:`a < x < b`          |
+------------------------+---------------------------+----------------------------+
| Finite and             | :math:`[a, b)`            | :math:`a \leq x < b`       |
|                        +---------------------------+----------------------------+
| Half-Opened            | :math:`(a, b]`            | :math:`a < x \leq`         |
+------------------------+---------------------------+----------------------------+
| Infinite and           | :math:`(-\infty, b]`      | :math:`-\infty < x \leq b` |
|                        +---------------------------+----------------------------+
| Closed                 | :math:`[a, \infty)`       | :math:`a \leq x < \infty`  |
+------------------------+---------------------------+----------------------------+
| Infinite and           | :math:`(-\infty, b)`      | :math:`-\infty < x < b`    |
|                        +---------------------------+----------------------------+
| Open                   | :math:`(a, \infty)`       | :math:`a < x < \infty`     |
|                        +---------------------------+----------------------------+
|                        | :math:`(-\infty, \infty)` | :math:`-\infty x < \infty` |
+------------------------+---------------------------+----------------------------+


.. _set-notation:

Set Notation
------------

Domain and Range can be written using the following formula:
    `{x âˆˆ <type of number> | condition}`

.. note::

  The condition mention is the same as the *Inequality Descriptions* mentioned
  above.


Finding Natural/ Implied Domain
*******************************

The Natural/Implied Domain of a function is the domain of said function
**without** domain restrictions (ie. :math:`y = x \; [-1, 3]` where the
values within the brackets are the restrictions)


.. _domain-restriction:

Domain Restrictions
*******************

Usage:
  Specify which part of the domain is/can be used by a function.

Writing Domain Restrictions:
  Use :ref:`Set Notation<set-notation>` to indicate which values are to be used

  Domain Restrictions are usually written immediately after a function.
    Example:

      :math:`f(x) = x^2 \; [0, \infty]`

      This restricts the domain of the Quadratic Function to any value
      greater than or equal to 0, making it :ref:`Invertible<inverse-of-functions>`


Injective, Surjective, Bijective Functions
==========================================

*\"Injective, Surjective, and Bijective"* tell us how a Function behaves.

.. _injectivity:

Injective
    Outputs **cannot have more than one** Input

      Also known as a *\"one-to-one mapping"*

      Outputs may might not be paired with an Input

.. note::
    **Horizontal Line Test** - a horizontal line *should not* intersect the graph at more than one point

Surjective
    Every Output has **at least one** Input

      There will **never** be an Output without an Input

Bijective
    Both Injective **and** Surjective

      **Every** Output has **exactly one** Input (*one-to-one correspondence*)


Examples:
  .. image:: ..\\_static\\function-mapping.svg


Even, Odd, or None
==================

Even Functions
  Meets the following criteria:
    :math:`f(x) = f(-x)`

  Is symmetric across the *y-axis*

  .. image:: ..\\_static\\even.svg
    :scale: 75%

Odd Functions
  Meets the following criteria:
    :math:`-f(x) = f(-x)`

  Is symmetric across the *origin or (0,0)*

  .. image:: ..\\_static\\odd.svg
    :scale: 75%

Functions that are Neither
  Neither symmetric across the *y-axis* or *origin*

  .. image:: ..\\_static\\neither.svg
    :scale: 75%


Composition of Functions
========================

Definition
  Taking the output values from one function and using those as the input
  values for a second function

.. image:: ..\\_static\\Figure_3-2.png
    :scale: 25%

.. note::

	Think of composite functions as *Nested Functions*, where one is *nested* within another

Example:

| Original Funcitons:
|   :math:`f(x) = x^3 + 2`
|   :math:`g(x) = \sqrt{x}`
|
| Composite Functions using Original Funcitons:
|   :math:`h(x) = f(g(x)) = (\sqrt{x})^3 + 2`
|   :math:`h(x) = g(f(x)) = \sqrt{x^3 + 2}`
|

.. note::

  Composite Functions can also be written as:
  :math:`h(x) = (f \circ g)(x)`, which is the same as :math:`h(x) = f(g(x))`

  Some Functions might have **Domain Restrictions** that are written in *Interval Notation*.
  These are the only that can be used; any values outside of the restrictions should be written as **DNE** (*Does Not Exist*)


Decomposition of Functions
**************************

Definition
  Breaking down Composite Functions into their Component Functions

Example:

| Composite Function:
|   :math:`f(g(x)) = \sqrt{x - 8}`
|
| Possible Component Functions:
|   :math:`f(x) = \sqrt{x}`
|   :math:`g(x) = x - 8`
|

.. note::

  It matters which Functions you designate as :math:`f(x)` and :math:`g(x)`


.. _inverse-of-functions:

Inverse of Functions
====================

.. sidebar:: What Functions have Inverses?

  If a function is :ref:`Injective<injectivity>` then it is said to be *invertible* (ie. has an Inverse)

Definition:
  Functions where the *Inputs* and *Outputs* are **switched**


Writing Inverse Functions
  Usually as :math:`y = f^{-1}(f(y)) = f^{-1}(x)`

Properties of Inverse Functions
  The graphs of :math:`f` and :math:`f^{-1}` are symmetric along the line :math:`y = x`

.. note::
  Remember: Only functions whose Output have **only one** Input have Inverses


Calculating Inverses of Functions
*********************************

.. note::

  Before calculating the inverse, make sure the function is :ref:`Injective<injectivity>`

  If the function is not **invertible**, apply a :ref:`Domain Restriction<domain-restriction>`

**Steps to Calculate the Inverse of a Function:**

1. Change :math:`f(x)` to :math:`y`
2. Switch the position of :math:`x` and :math:`y`
3. Solve for :math:`y` (get :math:`y` by itself)
4. Change :math:`y` to :math:`f^{-1}`

**Example:**

Starting Function:
  :math:`f(x) = x^3 + 4`

Step 1.
  :math:`y = x^3 + 4`

Step 2.
  :math:`x = y^3 + 4`

Step 3.
  :math:`x - 4 = y^3 \\ \sqrt[3]{x -4} = y`

Step 4.
  :math:`\sqrt[3]{x - 4} = f^{-1}` or :math:`f^{-1} = \sqrt[3]{x - 4}`
